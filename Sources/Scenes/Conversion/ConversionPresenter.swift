//
//  ConversionPresenter.swift
//  Project1
//
//  Created by Mihai Cristescu on 17/12/2017.
//  Copyright (c) 2017 Mihai Cristescu. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ConversionPresentationLogic {
    func presentConvertedValue(response: Conversion.Length.Response)
    func presentConvertionError(response: Conversion.Length.Error)
}

class ConversionPresenter: ConversionPresentationLogic {
    
    weak var viewController: ConversionDisplayLogic?
    
    // MARK: Present conversion formatted
    
    func presentConvertedValue(response: Conversion.Length.Response) {
        
        let formattedValue = formatValue(response.convertedValue, type: response.conversionType)
        
        let viewModel = Conversion.Length.ViewModel(formattedValue: formattedValue)
        viewController?.displayConversion(viewModel: viewModel)
    }
    
    // MARK: Present error
    func presentConvertionError(response: Conversion.Length.Error) {
        let viewModel = Conversion.Length.ViewModel(formattedValue: response.message)
        viewController?.displayConversion(viewModel: viewModel)
    }
    
    // MARK: Private methods
    
    private func formatValue(_ value: Double, type: Int) -> String {
        let stringValue = NSNumber(value: value).stringValue
        if type == 0 {
            return (stringValue + " mm")
        } else {
            return (stringValue + " km")
        }
    }
}
